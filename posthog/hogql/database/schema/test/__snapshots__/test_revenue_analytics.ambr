# serializer version: 1
# name: TestRevenueAnalytics.test_get_revenue_for_events
  '''
  SELECT persons__pdi__revenue_analytics.revenue AS revenue
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE and(equals(person.team_id, 99999), in(id,
                                                   (SELECT where_optimization.id AS id
                                                    FROM person AS where_optimization
                                                    WHERE and(equals(where_optimization.team_id, 99999), equals(where_optimization.id, '00000000-0000-0000-0000-000000000000')))))
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `revenue_analytics.purchase.customer_revenue_view_events`.id AS id,
               `revenue_analytics.purchase.customer_revenue_view_events`.source_label AS source_label,
               `revenue_analytics.purchase.customer_revenue_view_events`.timestamp AS timestamp,
               `revenue_analytics.purchase.customer_revenue_view_events`.name AS name,
               `revenue_analytics.purchase.customer_revenue_view_events`.email AS email,
               `revenue_analytics.purchase.customer_revenue_view_events`.phone AS phone,
               `revenue_analytics.purchase.customer_revenue_view_events`.metadata AS metadata,
               `revenue_analytics.purchase.customer_revenue_view_events`.address AS address,
               `revenue_analytics.purchase.customer_revenue_view_events`.country AS country,
               `revenue_analytics.purchase.customer_revenue_view_events`.cohort AS cohort,
               `revenue_analytics.purchase.customer_revenue_view_events`.initial_coupon AS initial_coupon,
               `revenue_analytics.purchase.customer_revenue_view_events`.initial_coupon_id AS initial_coupon_id,
               `revenue_analytics.purchase.customer_revenue_view_events`.distinct_id AS distinct_id
        FROM
          (SELECT events.distinct_id AS id,
                  'revenue_analytics.purchase' AS source_label,
                  min(toTimeZone(events.timestamp, 'UTC')) AS timestamp,
                  NULL AS name,
                  NULL AS email,
                  NULL AS phone,
                  NULL AS metadata,
                  NULL AS address,
                  NULL AS country,
                  NULL AS cohort,
                  NULL AS initial_coupon,
                  NULL AS initial_coupon_id,
                  events.distinct_id AS distinct_id
           FROM events
           WHERE and(equals(events.team_id, 99999), equals(events.event, 'purchase'))
           GROUP BY distinct_id
           ORDER BY timestamp DESC) AS `revenue_analytics.purchase.customer_revenue_view_events`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `revenue_analytics.purchase.invoice_item_revenue_view_events`.id AS id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.source_label AS source_label,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.timestamp AS timestamp,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.product_id AS product_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.customer_id AS customer_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.invoice_id AS invoice_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.session_id AS session_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.event_name AS event_name,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.coupon AS coupon,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.coupon_id AS coupon_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.original_currency AS original_currency,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.original_amount AS original_amount,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency_aware_divider AS currency_aware_divider,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency_aware_amount AS currency_aware_amount,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency AS currency,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.amount AS amount
        FROM
          (SELECT toString(events.uuid) AS id,
                  'revenue_analytics.purchase' AS source_label,
                  toTimeZone(events.timestamp, 'UTC') AS timestamp,
                  NULL AS product_id,
                  events.distinct_id AS customer_id,
                  NULL AS invoice_id,
                  toString(events.`$session_id`) AS session_id,
                  events.event AS event_name,
                  NULL AS coupon,
                  NULL AS coupon_id,
                  'USD' AS original_currency,
                  accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'revenue'), ''), 'null'), '^"|"$', ''), 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'USD' AS currency,
                    if(isNull('USD'), accurateCastOrNull(currency_aware_amount, 'Decimal64(10)'), if(equals('USD', 'USD'), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)))))) AS amount
           FROM events
           WHERE and(equals(events.team_id, 99999), and(equals(events.event, 'purchase'), isNotNull(amount)))
           ORDER BY timestamp DESC) AS `revenue_analytics.purchase.invoice_item_revenue_view_events`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  WHERE ifNull(equals(persons.id, '00000000-0000-0000-0000-000000000000'), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_events.1
  '''
  SELECT sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS `$virt_revenue`
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE and(equals(person.team_id, 99999), in(id,
                                                   (SELECT where_optimization.id AS id
                                                    FROM person AS where_optimization
                                                    WHERE and(equals(where_optimization.team_id, 99999), equals(where_optimization.id, '00000000-0000-0000-0000-000000000000')))))
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `revenue_analytics.purchase.customer_revenue_view_events`.id AS id,
               `revenue_analytics.purchase.customer_revenue_view_events`.source_label AS source_label,
               `revenue_analytics.purchase.customer_revenue_view_events`.timestamp AS timestamp,
               `revenue_analytics.purchase.customer_revenue_view_events`.name AS name,
               `revenue_analytics.purchase.customer_revenue_view_events`.email AS email,
               `revenue_analytics.purchase.customer_revenue_view_events`.phone AS phone,
               `revenue_analytics.purchase.customer_revenue_view_events`.metadata AS metadata,
               `revenue_analytics.purchase.customer_revenue_view_events`.address AS address,
               `revenue_analytics.purchase.customer_revenue_view_events`.country AS country,
               `revenue_analytics.purchase.customer_revenue_view_events`.cohort AS cohort,
               `revenue_analytics.purchase.customer_revenue_view_events`.initial_coupon AS initial_coupon,
               `revenue_analytics.purchase.customer_revenue_view_events`.initial_coupon_id AS initial_coupon_id,
               `revenue_analytics.purchase.customer_revenue_view_events`.distinct_id AS distinct_id
        FROM
          (SELECT events.distinct_id AS id,
                  'revenue_analytics.purchase' AS source_label,
                  min(toTimeZone(events.timestamp, 'UTC')) AS timestamp,
                  NULL AS name,
                  NULL AS email,
                  NULL AS phone,
                  NULL AS metadata,
                  NULL AS address,
                  NULL AS country,
                  NULL AS cohort,
                  NULL AS initial_coupon,
                  NULL AS initial_coupon_id,
                  events.distinct_id AS distinct_id
           FROM events
           WHERE and(equals(events.team_id, 99999), equals(events.event, 'purchase'))
           GROUP BY distinct_id
           ORDER BY timestamp DESC) AS `revenue_analytics.purchase.customer_revenue_view_events`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `revenue_analytics.purchase.invoice_item_revenue_view_events`.id AS id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.source_label AS source_label,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.timestamp AS timestamp,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.product_id AS product_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.customer_id AS customer_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.invoice_id AS invoice_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.session_id AS session_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.event_name AS event_name,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.coupon AS coupon,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.coupon_id AS coupon_id,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.original_currency AS original_currency,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.original_amount AS original_amount,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency_aware_divider AS currency_aware_divider,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency_aware_amount AS currency_aware_amount,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.currency AS currency,
               `revenue_analytics.purchase.invoice_item_revenue_view_events`.amount AS amount
        FROM
          (SELECT toString(events.uuid) AS id,
                  'revenue_analytics.purchase' AS source_label,
                  toTimeZone(events.timestamp, 'UTC') AS timestamp,
                  NULL AS product_id,
                  events.distinct_id AS customer_id,
                  NULL AS invoice_id,
                  toString(events.`$session_id`) AS session_id,
                  events.event AS event_name,
                  NULL AS coupon,
                  NULL AS coupon_id,
                  'USD' AS original_currency,
                  accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'revenue'), ''), 'null'), '^"|"$', ''), 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'USD' AS currency,
                    if(isNull('USD'), accurateCastOrNull(currency_aware_amount, 'Decimal64(10)'), if(equals('USD', 'USD'), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)))))) AS amount
           FROM events
           WHERE and(equals(events.team_id, 99999), and(equals(events.event, 'purchase'), isNotNull(amount)))
           ORDER BY timestamp DESC) AS `revenue_analytics.purchase.invoice_item_revenue_view_events`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  WHERE ifNull(equals(persons.id, '00000000-0000-0000-0000-000000000000'), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_custom_join
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         persons__pdi__revenue_analytics.revenue AS revenue
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  JSONExtractString(metadata, 'id') AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_custom_join.1
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS `$virt_revenue`
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  JSONExtractString(metadata, 'id') AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_customer_with_multiple_distinct_ids
  '''
  SELECT DISTINCT persons__pdi.distinct_id AS distinct_id,
                  sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS r
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  email AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY r ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_customer_with_multiple_distinct_ids.1
  '''
  SELECT DISTINCT sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS r
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  email AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY r ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_email_join
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         persons__pdi__revenue_analytics.revenue AS revenue
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  email AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_email_join.1
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS `$virt_revenue`
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  email AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_id_join
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         persons__pdi__revenue_analytics.revenue AS revenue
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  id AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalytics.test_get_revenue_for_schema_source_for_id_join.1
  '''
  SELECT persons__pdi.distinct_id AS distinct_id,
         sum(persons__pdi__revenue_analytics.revenue) OVER (PARTITION BY persons.id) AS `$virt_revenue`
  FROM
    (SELECT argMax(person.id, person.version) AS persons___id,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 99999)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons
  LEFT JOIN
    (SELECT argMax(person_distinct_id2.distinct_id, person_distinct_id2.version) AS persons__pdi___distinct_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 99999)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons__pdi ON equals(persons.persons___id, persons__pdi.person_id)
  LEFT JOIN
    (SELECT revenue_analytics_customer.distinct_id AS distinct_id,
            sum(revenue_analytics_invoice_item.amount) AS revenue,
            sumIf(revenue_analytics_invoice_item.amount, ifNull(greaterOrEquals(revenue_analytics_invoice_item.timestamp, minus(today(), toIntervalDay(30))), 0)) AS revenue_last_30_days
     FROM
       (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
               `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.customer_revenue_view`.name AS name,
               `stripe.posthog_test.customer_revenue_view`.email AS email,
               `stripe.posthog_test.customer_revenue_view`.phone AS phone,
               `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
               `stripe.posthog_test.customer_revenue_view`.address AS address,
               `stripe.posthog_test.customer_revenue_view`.country AS country,
               `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
               `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id,
               `stripe.posthog_test.customer_revenue_view`.distinct_id AS distinct_id
        FROM
          (SELECT outer.id AS id,
                  'stripe.posthog_test' AS source_label,
                  parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
                  outer.name AS name,
                  outer.email AS email,
                  outer.phone AS phone,
                  outer.metadata AS metadata,
                  outer.address AS address,
                  JSONExtractString(address, 'country') AS country,
                  cohort_inner.cohort_readable AS cohort,
                  cohort_inner.initial_coupon AS initial_coupon,
                  cohort_inner.initial_coupon_id AS initial_coupon_id,
                  id AS distinct_id
           FROM
             (SELECT *
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String')) AS outer
           LEFT JOIN
             (SELECT invoice.customer AS customer_id,
                     toStartOfMonth(min(parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC'))) AS cohort,
                     formatDateTime(cohort, '%Y-%m') AS cohort_readable,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'name'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon,
                     argMin(JSONExtractString(invoice.discount, 'coupon', 'id'), parseDateTime64BestEffortOrNull(toString(invoice.created), 6, 'UTC')) AS initial_coupon_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS invoice
              GROUP BY invoice.customer) AS cohort_inner ON equals(cohort_inner.customer_id, outer.id)) AS `stripe.posthog_test.customer_revenue_view`) AS revenue_analytics_customer
     LEFT JOIN
       (SELECT `stripe.posthog_test.invoice_item_revenue_view`.id AS id,
               `stripe.posthog_test.invoice_item_revenue_view`.source_label AS source_label,
               `stripe.posthog_test.invoice_item_revenue_view`.timestamp AS timestamp,
               `stripe.posthog_test.invoice_item_revenue_view`.product_id AS product_id,
               `stripe.posthog_test.invoice_item_revenue_view`.customer_id AS customer_id,
               `stripe.posthog_test.invoice_item_revenue_view`.invoice_id AS invoice_id,
               `stripe.posthog_test.invoice_item_revenue_view`.session_id AS session_id,
               `stripe.posthog_test.invoice_item_revenue_view`.event_name AS event_name,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon AS coupon,
               `stripe.posthog_test.invoice_item_revenue_view`.coupon_id AS coupon_id,
               `stripe.posthog_test.invoice_item_revenue_view`.original_currency AS original_currency,
               `stripe.posthog_test.invoice_item_revenue_view`.original_amount AS original_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.enable_currency_aware_divider AS enable_currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_divider AS currency_aware_divider,
               `stripe.posthog_test.invoice_item_revenue_view`.currency_aware_amount AS currency_aware_amount,
               `stripe.posthog_test.invoice_item_revenue_view`.currency AS currency,
               `stripe.posthog_test.invoice_item_revenue_view`.amount AS amount
        FROM
          (SELECT invoice.invoice_item_id AS id,
                  'stripe.posthog_test' AS source_label,
                  invoice.created_at AS timestamp,
                  invoice.product_id AS product_id,
                  invoice.customer_id AS customer_id,
                  id AS invoice_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  JSONExtractString(invoice.discount, 'coupon', 'name') AS coupon,
                  JSONExtractString(invoice.discount, 'coupon', 'id') AS coupon_id,
                  upper(invoice.currency) AS original_currency,
                  accurateCastOrNull(invoice.amount_captured, 'Decimal64(10)') AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'GBP' AS currency,
                    if(equals(original_currency, currency), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
           FROM
             (SELECT posthog_test_stripe_invoice.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_invoice.created), 6, 'UTC') AS created_at,
                     posthog_test_stripe_invoice.customer AS customer_id,
                     posthog_test_stripe_invoice.discount AS discount,
                     arrayJoin(JSONExtractArrayRaw(assumeNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(posthog_test_stripe_invoice.lines, 'data'), ''), 'null'), '^"|"$', '')))) AS data,
                     JSONExtractString(data, 'id') AS invoice_item_id,
                     JSONExtractString(data, 'amount') AS amount_captured,
                     JSONExtractString(data, 'currency') AS currency,
                     JSONExtractString(data, 'price', 'product') AS product_id
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_invoices/posthog_test_stripe_invoice/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `tax` Int64, `paid` UInt8, `lines` String, `total` Int64, `charge` String, `issuer` String, `number` String, `object` String, `status` String, `created` DateTime, `currency` String, `customer` String, `discount` String, `due_date` DateTime, `livemode` UInt8, `metadata` String, `subtotal` Int64, `attempted` UInt8, `discounts` String, `rendering` String, `amount_due` Int64, `amount_paid` Int64, `description` String, `invoice_pdf` String, `account_name` String, `auto_advance` UInt8, `effective_at` DateTime, `attempt_count` UInt8, `automatic_tax` String, `customer_name` String, `period_end_at` DateTime, `billing_reason` String, `customer_email` String, `ending_balance` Int64, `payment_intent` String, `account_country` String, `amount_shipping` Int64, `period_start_at` DateTime, `subscription_id` String, `amount_remaining` Int64, `customer_address` String, `customer_tax_ids` String, `paid_out_of_band` UInt8, `payment_settings` String, `starting_balance` Int64, `collection_method` String, `default_tax_rates` String, `total_tax_amounts` String, `hosted_invoice_url` String, `status_transitions` String, `customer_tax_exempt` String, `total_excluding_tax` Int64, `subscription_details` String, `webhooks_delivered_at` DateTime, `subtotal_excluding_tax` Int64, `total_discount_amounts` String, `pre_payment_credit_notes_amount` Int64, `post_payment_credit_notes_amount` Int64') AS posthog_test_stripe_invoice
              WHERE posthog_test_stripe_invoice.paid) AS invoice) AS `stripe.posthog_test.invoice_item_revenue_view`) AS revenue_analytics_invoice_item ON equals(revenue_analytics_customer.id, revenue_analytics_invoice_item.customer_id)
     GROUP BY distinct_id) AS persons__pdi__revenue_analytics ON equals(toString(persons__pdi.persons__pdi___distinct_id), persons__pdi__revenue_analytics.distinct_id)
  ORDER BY persons.id ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
